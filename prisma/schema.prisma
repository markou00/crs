// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum ContainerStatus {
  available
  unavailable
}

enum RepetitionFrequency {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
}

model User {
  id        String  @id @db.Uuid
  email     String  @unique
  role      Role    @default(user)
  firstName String?
  lastName  String?
  tenantId  String?
  Tenant    Tenant? @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id        String      @id @unique
  name      String
  users     User[]
  Customer  Customer[]
  Agreement Agreement[]
  Container Container[]
  Employee  Employee[]
  Car       Car[]
  job       Job[]
}

model Customer {
  id           Int         @id @default(autoincrement())
  name         String
  type         String
  contactName  String
  contactEmail String      @unique
  contactPhone String?
  address      String
  city         String
  postalCode   String
  country      String
  tenantId     String
  Tenant       Tenant      @relation(fields: [tenantId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Agreement    Agreement[]
}

model Agreement {
  id            Int       @id @default(autoincrement())
  type          String
  status        String
  containerName String
  customer      Customer  @relation(fields: [customerId], references: [id])
  validFrom     DateTime
  validTo       DateTime?
  comment       String?
  tenantId      String
  Tenant        Tenant    @relation(fields: [tenantId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  customerId    Int
  repetition    RepetitionFrequency @default(NONE)
  job           Job[]
}

model Container {
  id          Int             @id @default(autoincrement())
  name        String
  rfid        String
  capacity    Int
  type        String
  status      ContainerStatus @default(available)
  availableAt DateTime        @default(now())
  tenantId    String
  Tenant      Tenant          @relation(fields: [tenantId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  job         Job?
  jobId       Int?
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  status    String
  email     String   @unique
  phone     String   @unique
  picture   String?
  carId     Int?     @unique
  Car       Car?     @relation(fields: [carId], references: [id])
  tenantId  String
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Car {
  id        Int      @id @default(autoincrement())
  regnr     String   @unique
  model     String
  status    String
  Employee  Employee?
  tenantId  String
  Tenant    Tenant    @relation(fields: [tenantId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  job       Job[]
}

model Job {
  id          Int        @id @default(autoincrement())
  type        String
  status      String
  date        DateTime
  agreement   Agreement @relation(fields: [agreementId], references: [id])
  comment     String?
  tenantId    String
  Tenant      Tenant     @relation(fields: [tenantId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  containerId Int?       @unique
  agreementId Int
  carId       Int?
  container   Container? @relation(fields: [containerId], references: [id])
  car         Car? @relation(fields: [carId], references: [id])
}
